{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"JITORM: Just-In-Time Optimized Python ORM","text":"<p>JITORM is a Python-based Object-Relational Mapping (ORM) framework enhanced with Just-In-Time (JIT) compilation to optimize data mapping performance. Developed for data-intensive environments, it significantly reduces execution time, memory usage, and CPU load compared to traditional ORM frameworks.</p>"},{"location":"#key-features","title":"\ud83d\ude80 Key Features","text":"<ul> <li>Declarative model definition</li> <li>Backend support for PostgreSQL, MySQL, and SQLite</li> <li>JIT compilation using LLVM (via llvmlite)</li> <li>Optimized object mapping layer</li> <li>Compatible with Flask and FastAPI</li> <li>Efficient for large dataset processing and batch operations</li> </ul>"},{"location":"#installation","title":"\ud83d\udce6 Installation","text":"<p>Install directly from GitHub using:</p> <pre><code>pip install git+git://github.com/akarkode/jitorm.git\n</code></pre> <p>Or via HTTPS if preferred:</p> <pre><code>pip install git+https://github.com/akarkode/jitorm.git\n</code></pre>"},{"location":"#example-usage","title":"\ud83e\udde9 Example Usage","text":""},{"location":"#modelpy","title":"<code>model.py</code>","text":"<pre><code>from jitorm.orm.models import Model\nfrom jitorm.orm.fields import IntegerField, StringField\n\nclass Users(Model):\n    id = IntegerField(primary_key=True)\n    username = StringField()\n    password = StringField()\n    name = StringField()\n    address = StringField()\n    email = StringField()\n    job = StringField()\n    birthdate = StringField()\n    phone_number = StringField()\n</code></pre>"},{"location":"#crudpy","title":"<code>crud.py</code>","text":"<pre><code>from jitorm.orm.session import Session\n\nclass CRUD:\n\n    @staticmethod\n    def create(db: Session, model, data):\n        record = model(**data)\n        db.add(record)\n        db.commit()\n        return record\n\n    @staticmethod\n    def get_by_id(db: Session, model, id):\n        record = db.query(model).filter(id=id).first()\n        if not record:\n            print(f\"Data with id {id} not found.\")\n            return\n        return record\n\n    @staticmethod\n    def get_list(db: Session, model):\n        return db.query(model).all()\n\n    @staticmethod\n    def update(db: Session, model, filters, **kwargs):\n        db.update(model, filters, **kwargs)\n        db.commit()\n        return\n\n    @staticmethod\n    def delete(db: Session, model, filters):\n        db.delete(model, filters)\n        db.commit()\n        return\n\n    @staticmethod\n    def bulk_create(db: Session, model, data):\n        db.bulk_create(model=model, items=data)\n        return\n</code></pre>"},{"location":"#integration-example-fastapi","title":"\ud83d\udd27 Integration Example (FastAPI)","text":"<pre><code>from fastapi import FastAPI, Depends\nfrom jitorm.orm.postgresql import DatabaseConnection\nfrom jitorm.orm.session import Session\nfrom models import Users\nfrom crud import CRUD\n\napp = FastAPI()\ndb_conn = DatabaseConnection(\n    host=\"localhost\",\n    port=5432,\n    user=\"postgres\",\n    password=\"yourpassword\",\n    database=\"yourdb\"\n)\n\ndef get_db():\n    with Session(db_conn) as db:\n        yield db\n\n@app.post(\"/users\")\ndef create_user(data: dict, db=Depends(get_db)):\n    return CRUD.create(db, Users, data)\n\n@app.get(\"/users/{user_id}\")\ndef get_user(user_id: int, db=Depends(get_db)):\n    return CRUD.get_by_id(db, Users, user_id)\n</code></pre>"},{"location":"#academic-background","title":"\ud83d\udcda Academic Background","text":"<p>This project is based on the research:</p> <p>Enhancing Python Object-Relational Mapping Performance using Just-In-Time Compiler by Aldi Setiawan \u2014 Telkom University, 2025</p> <p>\ud83e\uddfe Official Publications: - IEEE Xplore: https://ieeexplore.ieee.org/document/10933413 - ResearchGate: https://www.researchgate.net/publication/390221559_Enhancing_Python_Object-Relational_Mapping_Performance_using_Just-in-Time_Compiler</p> <p>\ud83d\udfe2 This paper has been officially indexed by Scopus.</p>"},{"location":"#dependencies","title":"\ud83d\udee0 Dependencies","text":"<ul> <li><code>mysqlclient</code></li> <li><code>psycopg2-binary</code></li> <li><code>llvmlite</code></li> <li><code>numpy</code></li> </ul>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>MIT License \u00a9 2025 AKARKODE</p>"}]}